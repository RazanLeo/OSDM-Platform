// OSDM Platform - Complete Database Schema
// Combining Gumroad, Picalica, Fiverr, Khamsat, Upwork, Mostaql, Bahr functionalities

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USERS & AUTHENTICATION
// ============================================

enum UserRole {
  BUYER
  SELLER
  ADMIN
  FREELANCER
}

enum AccountType {
  INDIVIDUAL
  COMPANY
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  username          String              @unique
  password          String
  fullName          String
  phone             String?
  avatar            String?
  role              UserRole            @default(BUYER)
  accountType       AccountType         @default(INDIVIDUAL)
  isEmailVerified   Boolean             @default(false)
  isPhoneVerified   Boolean             @default(false)
  twoFactorEnabled  Boolean             @default(false)
  twoFactorSecret   String?
  verificationStatus VerificationStatus @default(PENDING)

  // Company specific fields
  companyName       String?
  companyRegistration String?
  taxNumber         String?

  // Location
  country           String?
  city              String?
  address           String?

  // Settings
  language          String              @default("ar")
  timezone          String              @default("Asia/Riyadh")
  currency          String              @default("SAR")

  // Financial
  balance           Float               @default(0)
  pendingBalance    Float               @default(0)
  totalEarnings     Float               @default(0)

  // Stats
  totalSales        Int                 @default(0)
  totalPurchases    Int                 @default(0)
  averageRating     Float               @default(0)
  totalReviews      Int                 @default(0)

  // Status
  isActive          Boolean             @default(true)
  isSuspended       Boolean             @default(false)
  suspensionReason  String?
  lastLoginAt       DateTime?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  sellerProfile     SellerProfile?
  freelancerProfile FreelancerProfile?
  readyProducts     ReadyProduct[]
  customServices    CustomService[]
  projects          Project[]
  proposals         Proposal[]
  orders            Order[]
  purchases         Order[]             @relation("buyer")
  reviews           Review[]
  receivedReviews   Review[]            @relation("reviewee")
  sentMessages      Message[]           @relation("sender")
  receivedMessages  Message[]           @relation("receiver")
  notifications     Notification[]
  favorites         Favorite[]
  cartItems         CartItem[]
  transactions      Transaction[]
  withdrawals       Withdrawal[]
  disputes          Dispute[]
  reportsMade       Report[]            @relation("reporter")
  reportsReceived   Report[]            @relation("reported")
  sessions          Session[]

  @@index([email])
  @@index([username])
  @@index([role])
}

// ============================================
// SELLER & FREELANCER PROFILES
// ============================================

model SellerProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Profile
  bio               String?
  skills            String[]
  languages         String[]
  certifications    String[]
  portfolio         String[]

  // Business Info
  businessName      String?
  businessType      String?
  website           String?
  socialLinks       Json?

  // Verification
  idDocument        String?
  businessLicense   String?
  verifiedBadge     Boolean   @default(false)
  topRatedBadge     Boolean   @default(false)

  // Stats
  responseTime      Int?      // in minutes
  deliveryRate      Float     @default(100)
  completionRate    Float     @default(100)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
}

model FreelancerProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Profile
  title             String?
  bio               String?
  hourlyRate        Float?
  skills            String[]
  languages         String[]
  education         Json[]
  experience        Json[]
  certifications    String[]
  portfolio         String[]

  // Availability
  availability      String    @default("AVAILABLE") // AVAILABLE, BUSY, UNAVAILABLE
  hoursPerWeek      Int?

  // Verification
  verifiedBadge     Boolean   @default(false)
  topRatedBadge     Boolean   @default(false)

  // Stats
  successRate       Float     @default(100)
  responseTime      Int?
  totalJobs         Int       @default(0)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
}

// ============================================
// READY PRODUCTS (Gumroad/Picalica Style)
// ============================================

enum ProductStatus {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  REJECTED
  SUSPENDED
}

// ============================================
// PRODUCT CATEGORIES - Complete Classification
// Based on the comprehensive prompt (300+ types)
// ============================================

// Main Category: TEXTUAL_CONTENT (المحتوى النصي والمكتوب)
enum TextualContentType {
  // 1.1 E-Books (46 types)
  EBOOK_SCIENTIFIC
  EBOOK_CHILDREN
  EBOOK_SELF_DEVELOPMENT
  EBOOK_BIOGRAPHY
  EBOOK_HISTORY
  EBOOK_GEOGRAPHY
  EBOOK_NATURAL_SCIENCES
  EBOOK_SOCIAL_SCIENCES
  EBOOK_BUSINESS_ECONOMICS
  EBOOK_RELIGION_PHILOSOPHY
  EBOOK_ARTS_CRAFTS
  EBOOK_FASHION_BEAUTY
  EBOOK_COOKING_FOOD
  EBOOK_HEALTH_MEDICINE
  EBOOK_TECHNOLOGY
  EBOOK_TRAVEL_TOURISM
  EBOOK_EDUCATION
  EBOOK_SPORTS
  EBOOK_LAW
  EBOOK_ENVIRONMENT
  EBOOK_REFERENCE
  EBOOK_FICTION_NOVEL
  EBOOK_CLASSIC_LITERATURE
  EBOOK_SHORT_STORIES
  EBOOK_GRAPHIC_NOVEL
  EBOOK_PLAYS
  EBOOK_POETRY
  EBOOK_MYTHOLOGY

  // 1.2 Research & Reports (7 types)
  MARKET_RESEARCH
  INDUSTRY_REPORT
  FEASIBILITY_STUDY
  WHITE_PAPER
  CASE_STUDY
  STATISTICAL_REPORT
  SCIENTIFIC_RESEARCH

  // 1.3 Text Templates (10 types)
  TEMPLATE_CV
  TEMPLATE_LETTER
  TEMPLATE_BUSINESS_PLAN
  TEMPLATE_CONTRACT
  TEMPLATE_MARKETING
  TEMPLATE_EMAIL
  TEMPLATE_INVOICE
  TEMPLATE_PRESENTATION
  TEMPLATE_DOCUMENT
  TEMPLATE_REPORT

  // 1.4 Educational Content (8 types)
  WRITTEN_COURSE
  SUMMARY
  GUIDE_MANUAL
  ARTICLE_BLOG
  EDUCATIONAL_FILE
  WORKSHEET
  QUIZ_TEST
  PROMPT_FILE
}

// Main Category: VISUAL_CONTENT (المحتوى المرئي البصري)
enum VisualContentType {
  // 2.1 Design Templates (8 types)
  TEMPLATE_CANVA
  TEMPLATE_PHOTOSHOP
  TEMPLATE_ILLUSTRATOR
  TEMPLATE_INDESIGN
  TEMPLATE_FIGMA
  TEMPLATE_SKETCH
  TEMPLATE_AFTER_EFFECTS
  TEMPLATE_PREMIERE

  // 2.2 Images & Graphics (13 types)
  STOCK_PHOTO
  ILLUSTRATION
  ICON_SET
  CHARACTER_CARTOON
  DIGITAL_ART
  INFOGRAPHIC
  CHART_GRAPH
  BACKGROUND_WALLPAPER
  PATTERN_TEXTURE
  DIGITAL_STICKER
  PNG_TRANSPARENT
  VECTOR_IMAGE
  DECORATION_DESIGN

  // 2.3 Print Designs (13 types)
  PRINT_TSHIRT
  PRINT_MUG
  PRINT_BAG
  PRINT_POSTER
  PRINT_STICKER
  PRINT_HAT
  PRINT_PILLOW
  PRINT_PHONE_CASE
  PRINT_CANVAS
  PRINT_BUSINESS_CARD
  PRINT_INVITATION
  PRINT_CERTIFICATE
  PRINT_GREETING_CARD

  // 2.4 Business Templates (10 types)
  TEMPLATE_EXCEL
  TEMPLATE_GOOGLE_SHEETS
  TEMPLATE_NOTION
  TEMPLATE_AIRTABLE
  TEMPLATE_MONDAY
  TEMPLATE_TRELLO
  TEMPLATE_ASANA
  DIGITAL_PLANNER
  CALENDAR_TEMPLATE
  BUDGET_TEMPLATE

  // 2.5 Design Resources (10 types)
  FONT_TYPOGRAPHY
  PHOTOSHOP_BRUSH
  DESIGN_TOOL
  PHOTOSHOP_ACTION
  LIGHTROOM_PRESET
  COLOR_LUT
  PRODUCT_MOCKUP
  FILTER_EFFECT
  OVERLAY
  GRADIENT
}

// Main Category: AUDIO_CONTENT (المحتوى السمعي الصوتي)
enum AudioContentType {
  // 3.1 Music & Sound Effects (10 types)
  ROYALTY_FREE_MUSIC
  BACKGROUND_MUSIC
  SOUNDTRACK
  SOUND_EFFECT
  NATURE_SOUND
  URBAN_SOUND
  MUSIC_LOOP
  BEAT
  RINGTONE
  ALERT_SOUND

  // 3.2 Educational Audio (11 types)
  AUDIOBOOK
  PODCAST_RECORDED
  AUDIO_LESSON
  RECORDED_LECTURE
  AUDIO_STORY
  GUIDED_MEDITATION
  RELAXATION_AUDIO
  ASMR_CONTENT
  AUDIO_COURSE
  RECORDED_WEBINAR
  SONG
}

// Main Category: VIDEO_CONTENT (المحتوى المرئي المتحرك)
enum VideoContentType {
  // 4.1 Video Footage (11 types)
  STOCK_FOOTAGE
  SHORT_VIDEO
  LONG_VIDEO
  ANIMATED_BACKGROUND
  VIDEO_FILTER
  DRONE_FOOTAGE
  TIMELAPSE
  SLOW_MOTION
  VIDEO_360
  VR_VIDEO
  GREEN_SCREEN

  // 4.2 Video Templates (10 types)
  INTRO_TEMPLATE
  OUTRO_TEMPLATE
  TITLE_TEMPLATE
  TRANSITION_TEMPLATE
  LOWER_THIRD
  AD_TEMPLATE
  SOCIAL_MEDIA_VIDEO
  MOTION_GRAPHICS
  EXPLAINER_TEMPLATE
  PRESENTATION_VIDEO

  // 4.3 Educational Video (10 types)
  VIDEO_COURSE
  TUTORIAL_VIDEO
  RECORDED_LECTURE_VIDEO
  RECORDED_WORKSHOP
  RECORDED_SEMINAR
  RECORDED_LESSON
  DOCUMENTARY
  HOW_TO_VIDEO
  PRODUCT_REVIEW
  VIDEO_MANUAL
}

// Main Category: INTERACTIVE_CONTENT (المحتوى التفاعلي والرقمي)
enum InteractiveContentType {
  // 5.1 Games & Apps (10 types)
  CASUAL_GAME
  EDUCATIONAL_GAME
  PUZZLE_GAME
  UTILITY_APP
  PRODUCTIVITY_APP
  LEARNING_APP
  GAME_ASSET
  UNITY_ASSET
  UNREAL_ASSET
  GAME_TEMPLATE

  // 5.2 Interactive Content (10 types)
  INTERACTIVE_SURVEY
  INTERACTIVE_QUIZ
  INTERACTIVE_CALCULATOR
  INTERACTIVE_MAP
  INTERACTIVE_PRESENTATION
  INTERACTIVE_INFOGRAPHIC
  VIRTUAL_TOUR
  INTERACTIVE_FORM
  INTERACTIVE_TIMELINE
  DASHBOARD_TEMPLATE
}

// Main Category: CODE_TECH (محتوى البرمجة والتقنية)
enum CodeTechType {
  // 6.1 Code & Scripts (11 types)
  CODE_TEMPLATE
  PYTHON_SCRIPT
  JAVASCRIPT_SCRIPT
  PHP_SCRIPT
  BASH_SCRIPT
  PINE_SCRIPT
  CODE_SNIPPET
  REGEX
  SQL_QUERY
  API_COLLECTION
  POSTMAN_COLLECTION

  // 6.2 Plugins & Components (11 types)
  WORDPRESS_PLUGIN
  SHOPIFY_APP
  CHROME_EXTENSION
  VS_CODE_EXTENSION
  PHOTOSHOP_PLUGIN
  EXCEL_ADDIN
  CODE_LIBRARY
  FRAMEWORK
  API
  SDK
  OTHER_PLUGIN

  // 6.3 Tech Templates (10 types)
  DATABASE_TEMPLATE
  DOCKER_TEMPLATE
  KUBERNETES_TEMPLATE
  CI_CD_PIPELINE
  INFRASTRUCTURE_CODE
  CLOUD_TEMPLATE
  TRADING_INDICATOR
  EXPERT_ADVISOR
  SMART_CONTRACT
  ML_MODEL

  // 6.4 Website & App Templates (11 types)
  WORDPRESS_THEME
  SHOPIFY_THEME
  HTML_CSS_TEMPLATE
  REACT_TEMPLATE
  VUE_TEMPLATE
  ANGULAR_TEMPLATE
  BOOTSTRAP_TEMPLATE
  LANDING_PAGE
  EMAIL_TEMPLATE
  MOBILE_APP_TEMPLATE
  WEB_COPY_TEMPLATE
}

// Main Category: SPECIALIZED_DIGITAL (المنتجات الرقمية المتخصصة)
enum SpecializedDigitalType {
  // 7.1 NFTs & Digital Assets (10 types)
  NFT_DIGITAL_ART
  NFT_COLLECTIBLE
  NFT_GAMING
  NFT_MUSIC
  NFT_VIRTUAL_REAL_ESTATE
  NFT_AVATAR
  NFT_DOMAIN
  NFT_MEMBERSHIP
  NFT_UTILITY
  NFT_AR_VR

  // 7.2 3D Content (10 types)
  THREE_D_MODEL
  THREE_D_MATERIAL
  THREE_D_ANIMATION
  THREE_D_ENVIRONMENT
  THREE_D_CHARACTER
  THREE_D_FURNITURE
  THREE_D_VEHICLE
  THREE_D_PLANT
  THREE_D_ARCHITECTURE
  THREE_D_CLOTHING

  // 7.3 VR/AR Content (10 types)
  VR_APPLICATION
  VR_GAME
  VR_TOUR
  VR_TRAINING
  AR_FILTER
  AR_APPLICATION
  AR_GAME
  AR_BOOK
  AR_CARD
  METAVERSE_EXPERIENCE
}

// Main Category: SUBSCRIPTION_SERVICES (الخدمات الاشتراكية)
enum SubscriptionServiceType {
  // 8.1 Subscription Content (10 types)
  PREMIUM_NEWSLETTER
  EXCLUSIVE_CONTENT
  RESOURCE_LIBRARY
  MONTHLY_TEMPLATE
  STOCK_SUBSCRIPTION
  SUBSCRIPTION_COURSE
  COACHING_PROGRAM
  MASTERMIND_GROUP
  COMMUNITY_ACCESS
  PREMIUM_SUPPORT

  // 8.2 SaaS Platforms (10 types)
  SAAS_PROJECT_MANAGEMENT
  SAAS_CRM
  SAAS_MARKETING
  SAAS_ANALYTICS
  SAAS_LMS
  SAAS_ACCOUNTING
  SAAS_DESIGN
  SAAS_CLOUD_STORAGE
  SAAS_SECURITY
  SAAS_COMMUNICATION
}

// ============================================
// CUSTOM SERVICE CATEGORIES - Complete Classification
// Based on Table B from prompt (200+ service types)
// ============================================

// Category 1: WRITING_CONTENT_SERVICES (خدمات الكتابة والمحتوى)
enum WritingContentServiceType {
  // 1.1 Content Writing (13 types)
  ARTICLE_WRITING
  BLOG_WRITING
  COPYWRITING
  PRODUCT_DESCRIPTION
  AD_COPY
  SCRIPT_WRITING
  PODCAST_SCRIPT
  TECHNICAL_WRITING
  MEDICAL_WRITING
  LEGAL_WRITING
  GHOST_WRITING
  CV_WRITING
  RESEARCH_REPORT

  // 1.2 Editing & Translation (10 types)
  EDITING
  PROOFREADING
  GENERAL_TRANSLATION
  SPECIALIZED_TRANSLATION
  SIMULTANEOUS_TRANSLATION
  LOCALIZATION
  TRANSCRIPTION
  SUBTITLING
  REWRITING
  SUMMARIZATION
}

// Category 2: DESIGN_CREATIVE_SERVICES (خدمات التصميم والإبداع)
enum DesignCreativeServiceType {
  // 2.1 Graphic Design (13 types)
  LOGO_DESIGN
  BRAND_IDENTITY
  POSTER_DESIGN
  BROCHURE_DESIGN
  BOOK_DESIGN
  COVER_DESIGN
  CARD_DESIGN
  PACKAGING_DESIGN
  AD_DESIGN
  SOCIAL_MEDIA_DESIGN
  BANNER_DESIGN
  DIGITAL_ILLUSTRATION
  IMAGE_EDITING

  // 2.2 Print Design (13 types)
  TSHIRT_DESIGN
  MUG_DESIGN
  BAG_DESIGN
  POSTER_PRINT_DESIGN
  STICKER_DESIGN
  HAT_DESIGN
  PILLOW_DESIGN
  PHONE_CASE_DESIGN
  CANVAS_DESIGN
  BUSINESS_CARD_DESIGN
  INVITATION_DESIGN
  CERTIFICATE_DESIGN
  GREETING_CARD_DESIGN

  // 2.3 UI/UX Design (10 types)
  UI_DESIGN
  UX_DESIGN
  WEB_DESIGN
  APP_DESIGN
  DASHBOARD_DESIGN
  WIREFRAMING
  PROTOTYPING
  ICON_DESIGN
  INTERACTION_DESIGN
  RESPONSIVE_DESIGN
}

// Category 3: AUDIO_VIDEO_SERVICES (خدمات الصوت والفيديو)
enum AudioVideoServiceType {
  // 3.1 Audio Services (10 types)
  VOICE_OVER
  PODCAST_PRODUCTION
  MUSIC_COMPOSITION
  SOUND_EFFECTS
  AUDIO_MIXING
  AUDIO_MASTERING
  SONG_RECORDING
  MUSIC_PRODUCTION
  AUDIO_EDITING
  AUDIO_RESTORATION

  // 3.2 Video Services (10 types)
  VIDEO_PRODUCTION
  EVENT_COVERAGE
  PRODUCT_PHOTOGRAPHY
  VIDEO_EDITING
  MOTION_GRAPHICS
  ANIMATION_2D
  ANIMATION_3D
  VFX
  COLOR_GRADING
  LIVE_STREAMING
}

// Category 4: DEV_PROGRAMMING_SERVICES (خدمات البرمجة والتطوير)
enum DevProgrammingServiceType {
  // 4.1 Web Development (15 types)
  FRONTEND_DEV
  BACKEND_DEV
  FULL_STACK_DEV
  WORDPRESS_DEV
  SHOPIFY_DEV
  LARAVEL_DEV
  REACT_DEV
  VUE_DEV
  ANGULAR_DEV
  API_DEV
  CMS_DEV
  WEBSITE_MAINTENANCE
  SCRIPT_CUSTOMIZATION
  ENTERPRISE_SOLUTIONS
  SYSTEM_INTEGRATION

  // 4.2 App Development (10 types)
  IOS_DEV
  ANDROID_DEV
  CROSS_PLATFORM_DEV
  DESKTOP_APP_DEV
  PWA_DEV
  GAME_DEV
  VR_AR_DEV
  IOT_DEV
  BLOCKCHAIN_DEV
  AI_ML_DEV
}

// Category 5: MARKETING_BUSINESS_SERVICES (التسويق الرقمي والأعمال)
enum MarketingBusinessServiceType {
  // 5.1 Digital Marketing (13 types)
  SEO
  CONTENT_MARKETING
  SOCIAL_MEDIA_MANAGEMENT
  PPC_ADVERTISING
  EMAIL_MARKETING
  AFFILIATE_MARKETING
  INFLUENCER_MARKETING
  ANALYTICS_REPORTING
  MARKETING_STRATEGY
  CONVERSION_OPTIMIZATION
  GROWTH_HACKING
  MARKETING_AUTOMATION
  BRANDING

  // 5.2 Business Consulting (15 types)
  BUSINESS_CONSULTING
  MARKETING_CONSULTING
  FINANCIAL_CONSULTING
  IT_CONSULTING
  HR_CONSULTING
  LEGAL_CONSULTING
  MANAGEMENT_CONSULTING
  FEASIBILITY_STUDY
  MARKET_RESEARCH
  BUSINESS_PLANNING
  PROJECT_MANAGEMENT
  VIRTUAL_ASSISTANT
  COACHING
  CAREER_COACHING
  EXECUTIVE_COACHING
}

// Category 6: EDUCATION_TRAINING_SERVICES (التعليم والتدريب)
enum EducationTrainingServiceType {
  // 6.1 Online Teaching (10 types)
  PRIVATE_TUTORING
  LANGUAGE_TEACHING
  PROGRAMMING_TUTORING
  MUSIC_LESSONS
  ART_CLASSES
  ACADEMIC_TUTORING
  SKILLS_TRAINING
  TEST_PREPARATION
  IELTS_TOEFL
  SAT_GRE

  // 6.2 Professional Training (10 types)
  LIFE_COACHING
  BUSINESS_COACHING
  CAREER_COACHING
  EXECUTIVE_COACHING
  LEADERSHIP_TRAINING
  SOFT_SKILLS_TRAINING
  TECHNICAL_TRAINING
  SALES_TRAINING
  CUSTOMER_SERVICE_TRAINING
  TEAM_BUILDING
}

// Category 7: SPECIALIZED_SERVICES (الخدمات المتخصصة)
enum SpecializedServiceType {
  // 7.1 Data & Analysis (10 types)
  DATA_ANALYSIS
  DATA_SCIENCE
  MACHINE_LEARNING
  AI_DEVELOPMENT
  BUSINESS_INTELLIGENCE
  DATA_VISUALIZATION
  BIG_DATA
  DATA_MINING
  PREDICTIVE_ANALYTICS
  STATISTICAL_ANALYSIS

  // 7.2 Cybersecurity (10 types)
  PENETRATION_TESTING
  VULNERABILITY_ASSESSMENT
  SECURITY_CONSULTING
  INCIDENT_RESPONSE
  SECURITY_AUDITS
  COMPLIANCE
  SECURITY_TRAINING
  DIGITAL_FORENSICS
  SOC_SERVICES
  RISK_ASSESSMENT

  // 7.3 Other Freelance Services (10 types)
  ECOMMERCE_MANAGEMENT
  REMOTE_CUSTOMER_SERVICE
  DATA_ENTRY
  INTERNET_RESEARCH
  MEDICAL_TRANSCRIPTION
  REMOTE_ACCOUNTING
  SOCIAL_MEDIA_MANAGEMENT
  COMMUNITY_MANAGEMENT
  CONTENT_MODERATION
  REPUTATION_MANAGEMENT

  // 7.4 AI & Automation Services (12 types)
  CHATBOT_DEVELOPMENT
  AI_ASSISTANT
  AI_CONTENT_GENERATION
  AI_VOICE_SERVICES
  AI_IMAGE_GENERATION
  AI_VIDEO_GENERATION
  PROCESS_AUTOMATION
  WORKFLOW_AUTOMATION
  RPA_SERVICES
  AI_TRAINING
  AI_INTEGRATION
  NO_CODE_DEV
}

// Category 8: LIVE_INTERACTIVE_SERVICES (الخدمات الحية والتفاعلية)
enum LiveInteractiveServiceType {
  // 8.1 Live Events (10 types)
  LIVE_WORKSHOP
  LIVE_WEBINAR
  VIRTUAL_CONFERENCE
  LIVE_COURSE
  LIVE_QA
  MASTERCLASS
  PANEL_DISCUSSION
  VIRTUAL_SUMMIT
  NETWORKING_EVENT
  VIRTUAL_TRADE_SHOW

  // 8.2 Personal Consultations (10 types)
  ONE_ON_ONE_CONSULTATION
  GROUP_COACHING
  MENTORING
  STRATEGY_SESSION
  BRAINSTORMING_SESSION
  REVIEW_SESSION
  FEEDBACK_SESSION
  PLANNING_SESSION
  ACCOUNTABILITY_COACHING
  PERFORMANCE_COACHING
}

// Combined ServiceType enum for backward compatibility
enum ServiceType {
  // Writing & Content
  WRITING
  CONTENT_CREATION
  TRANSLATION
  EDITING

  // Design & Creative
  GRAPHIC_DESIGN
  UI_UX_DESIGN
  BRANDING

  // Audio & Video
  VIDEO_EDITING
  ANIMATION
  VOICE_OVER
  MUSIC_PRODUCTION

  // Development
  WEB_DEVELOPMENT
  APP_DEVELOPMENT
  SOFTWARE_DEVELOPMENT

  // Marketing
  DIGITAL_MARKETING
  SEO
  SOCIAL_MEDIA

  // Business
  CONSULTING
  VIRTUAL_ASSISTANT
  PROJECT_MANAGEMENT

  // Education
  TUTORING
  TRAINING
  COACHING

  // Specialized
  DATA_ANALYSIS
  AI_SERVICES
  CYBERSECURITY

  OTHER
}

// ============================================
// FREELANCE JOB CATEGORIES - Complete Classification
// Based on Table C from prompt (Upwork + Mostaql + Bahr)
// ============================================

// Freelance Job Categories
enum FreelanceJobCategory {
  // 1. Web & App Development
  WEB_APP_DEVELOPMENT
  FRONTEND_DEVELOPMENT
  BACKEND_DEVELOPMENT
  FULL_STACK_DEVELOPMENT
  MOBILE_APP_DEVELOPMENT
  WORDPRESS_DEVELOPMENT
  SHOPIFY_DEVELOPMENT
  ECOMMERCE_DEVELOPMENT

  // 2. Design & Creative
  UI_UX_DESIGN
  GRAPHIC_DESIGN
  LOGO_DESIGN
  BRAND_IDENTITY
  ILLUSTRATION
  MOTION_GRAPHICS
  VIDEO_EDITING
  ANIMATION

  // 3. Writing & Content
  CONTENT_WRITING
  COPYWRITING
  TECHNICAL_WRITING
  TRANSLATION
  SEO_WRITING
  PROOFREADING
  GHOST_WRITING

  // 4. Digital Marketing
  SEO_SPECIALIST
  SOCIAL_MEDIA_MANAGER
  PPC_EXPERT
  EMAIL_MARKETING
  GROWTH_HACKER
  CONTENT_MARKETING
  INFLUENCER_MARKETING

  // 5. Programming & Development
  PYTHON_DEVELOPMENT
  JAVASCRIPT_DEVELOPMENT
  DATABASE_ADMIN
  DEVOPS
  API_DEVELOPMENT
  GAME_DEVELOPMENT
  BLOCKCHAIN_DEVELOPMENT

  // 6. Data & AI
  DATA_ANALYSIS
  MACHINE_LEARNING
  DATA_SCIENCE
  BUSINESS_INTELLIGENCE
  AI_DEVELOPMENT
  DATA_ENGINEERING

  // 7. Business Services
  VIRTUAL_ASSISTANT
  PROJECT_MANAGEMENT
  BUSINESS_CONSULTING
  FINANCIAL_CONSULTING
  HR_SERVICES
  CUSTOMER_SERVICE

  // 8. Audio & Video Production
  VIDEO_EDITING_JOB
  MOTION_GRAPHICS_JOB
  VOICE_OVER_JOB
  AUDIO_PRODUCTION
  ANIMATION_JOB
  PODCAST_EDITING

  OTHER_JOB
}

// Project Size for Freelance Jobs
enum ProjectSize {
  MICRO      // < 1 week, < 1000 SAR (مصغرة)
  SMALL      // 1-4 weeks, 1000-10000 SAR (متوسطة)
  MEDIUM     // 1-3 months, 10000-50000 SAR (كبيرة)
  LARGE      // > 3 months, > 50000 SAR (معقدة)
}

// Experience Level
enum ExperienceLevel {
  ENTRY      // مبتدئ
  INTERMEDIATE // متوسط
  EXPERT     // خبير
}

// Combined ProductType enum for backward compatibility
enum ProductType {
  // Textual Content
  EBOOK
  RESEARCH
  TEMPLATE
  ARTICLE

  // Visual Content
  GRAPHIC
  DESIGN_TEMPLATE
  PRINT_DESIGN

  // Audio Content
  AUDIO
  MUSIC
  PODCAST

  // Video Content
  VIDEO
  VIDEO_TEMPLATE
  COURSE

  // Interactive
  GAME
  APP

  // Code & Tech
  SOFTWARE
  PLUGIN
  THEME
  CODE

  // Specialized
  NFT
  THREE_D
  VR_AR

  // Subscription
  SUBSCRIPTION
  SAAS

  OTHER
}

model ReadyProduct {
  id                String          @id @default(cuid())
  sellerId          String
  seller            User            @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  // Basic Info
  title             String
  slug              String          @unique
  description       String
  shortDescription  String?

  // Category & Tags
  category          String
  subCategory       String?
  tags              String[]
  productType       ProductType

  // Media
  thumbnail         String
  images            String[]
  previewVideo      String?
  demoUrl           String?

  // Pricing
  price             Float
  compareAtPrice    Float?
  currency          String          @default("SAR")
  isOnSale          Boolean         @default(false)
  salePrice         Float?
  saleEndsAt        DateTime?

  // Product Files
  files             ProductFile[]
  fileSize          String?
  fileFormat        String?
  downloadLimit     Int?            // null = unlimited

  // Licensing
  licenseType       String          @default("PERSONAL") // PERSONAL, COMMERCIAL, EXTENDED
  licenseDetails    String?

  // SEO
  metaTitle         String?
  metaDescription   String?

  // Settings
  status            ProductStatus   @default(DRAFT)
  isDigital         Boolean         @default(true)
  requiresShipping  Boolean         @default(false)

  // Stats
  views             Int             @default(0)
  likes             Int             @default(0)
  sales             Int             @default(0)
  revenue           Float           @default(0)
  averageRating     Float           @default(0)
  totalReviews      Int             @default(0)

  // Timestamps
  publishedAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  orders            OrderItem[]
  reviews           Review[]
  favorites         Favorite[]

  @@index([sellerId])
  @@index([slug])
  @@index([category])
  @@index([status])
  @@index([publishedAt])
}

model ProductFile {
  id                String        @id @default(cuid())
  productId         String
  product           ReadyProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)

  fileName          String
  fileUrl           String
  fileSize          Int           // in bytes
  fileType          String
  isMainFile        Boolean       @default(false)
  order             Int           @default(0)

  createdAt         DateTime      @default(now())

  @@index([productId])
}

// ============================================
// CUSTOM SERVICES (Fiverr/Khamsat Style)
// ============================================

enum ServiceStatus {
  DRAFT
  PENDING_REVIEW
  ACTIVE
  PAUSED
  REJECTED
  SUSPENDED
}

enum DeliveryTime {
  ONE_DAY
  TWO_DAYS
  THREE_DAYS
  FIVE_DAYS
  SEVEN_DAYS
  TEN_DAYS
  FOURTEEN_DAYS
  TWENTY_ONE_DAYS
  THIRTY_DAYS
  CUSTOM
}

model CustomService {
  id                String          @id @default(cuid())
  sellerId          String
  seller            User            @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  // Basic Info
  title             String
  slug              String          @unique
  description       String
  shortDescription  String?

  // Category & Tags
  category          String
  subCategory       String?
  tags              String[]

  // Media
  thumbnail         String
  images            String[]
  video             String?

  // Pricing Tiers (Basic, Standard, Premium)
  packages          ServicePackage[]

  // Delivery
  deliveryTime      DeliveryTime
  customDeliveryDays Int?
  revisions         Int             @default(0) // 0 = unlimited

  // Requirements
  requirements      Json[]          // Questions for buyer

  // SEO
  metaTitle         String?
  metaDescription   String?

  // Settings
  status            ServiceStatus   @default(DRAFT)
  queueLength       Int             @default(0)
  maxOrdersInQueue  Int             @default(5)

  // Stats
  views             Int             @default(0)
  favorites         Int             @default(0)
  orders            Int             @default(0)
  completedOrders   Int             @default(0)
  averageRating     Float           @default(0)
  totalReviews      Int             @default(0)

  // Timestamps
  publishedAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  orderItems        OrderItem[]
  reviews           Review[]
  favoritesList     Favorite[]

  @@index([sellerId])
  @@index([slug])
  @@index([category])
  @@index([status])
}

model ServicePackage {
  id                String          @id @default(cuid())
  serviceId         String
  service           CustomService   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  name              String          // BASIC, STANDARD, PREMIUM
  description       String
  price             Float
  deliveryDays      Int
  revisions         Int             @default(0)
  features          String[]

  order             Int             @default(0)

  @@index([serviceId])
}

// ============================================
// FREELANCE PROJECTS (Upwork/Mostaql/Bahr Style)
// ============================================

enum ProjectStatus {
  DRAFT
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum ProjectBudgetType {
  FIXED
  HOURLY
}

enum ProjectExperienceLevel {
  ENTRY
  INTERMEDIATE
  EXPERT
}

model Project {
  id                String                  @id @default(cuid())
  clientId          String
  client            User                    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Basic Info
  title             String
  slug              String                  @unique
  description       String

  // Category & Skills
  category          String
  subCategory       String?
  skills            String[]

  // Budget
  budgetType        ProjectBudgetType
  fixedBudget       Float?
  hourlyRateMin     Float?
  hourlyRateMax     Float?
  estimatedHours    Int?
  currency          String                  @default("SAR")

  // Project Details
  projectSize       ProjectSize
  experienceLevel   ProjectExperienceLevel
  duration          String?

  // Attachments
  attachments       String[]

  // Requirements
  requirements      Json[]

  // Settings
  status            ProjectStatus           @default(DRAFT)
  isPrivate         Boolean                 @default(false)
  isFeatured        Boolean                 @default(false)

  // Freelancer Selection
  selectedFreelancerId String?

  // Stats
  views             Int                     @default(0)
  proposalsCount    Int                     @default(0)

  // Timestamps
  publishedAt       DateTime?
  deadline          DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt

  // Relations
  proposals         Proposal[]
  milestones        Milestone[]

  @@index([clientId])
  @@index([slug])
  @@index([category])
  @@index([status])
}

model Proposal {
  id                String        @id @default(cuid())
  projectId         String
  project           Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancerId      String
  freelancer        User          @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  // Proposal Details
  coverLetter       String
  proposedBudget    Float
  proposedDuration  Int           // in days
  milestones        Json[]

  // Attachments
  attachments       String[]
  portfolio         String[]

  // Status
  status            String        @default("PENDING") // PENDING, ACCEPTED, REJECTED, WITHDRAWN

  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([projectId])
  @@index([freelancerId])
  @@index([status])
}

model Milestone {
  id                String        @id @default(cuid())
  projectId         String
  project           Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  title             String
  description       String?
  amount            Float
  dueDate           DateTime?

  status            String        @default("PENDING") // PENDING, IN_PROGRESS, SUBMITTED, APPROVED, PAID

  // Deliverables
  deliverables      String[]
  submittedAt       DateTime?
  approvedAt        DateTime?

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([projectId])
}

// ============================================
// ORDERS & TRANSACTIONS
// ============================================

enum OrderStatus {
  PENDING
  PROCESSING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  MADA
  VISA
  MASTERCARD
  APPLE_PAY
  STC_PAY
  PAYPAL
  WALLET
}

model Order {
  id                String          @id @default(cuid())
  orderNumber       String          @unique

  buyerId           String
  buyer             User            @relation("buyer", fields: [buyerId], references: [id])

  sellerId          String
  seller            User            @relation(fields: [sellerId], references: [id])

  // Order Details
  items             OrderItem[]

  // Pricing
  subtotal          Float
  platformFee       Float
  taxAmount         Float
  discount          Float           @default(0)
  total             Float
  currency          String          @default("SAR")

  // Payment
  paymentStatus     PaymentStatus   @default(PENDING)
  paymentMethod     PaymentMethod?
  paymentIntentId   String?
  paidAt            DateTime?

  // Delivery
  deliveryDate      DateTime?
  completedAt       DateTime?

  // Status
  status            OrderStatus     @default(PENDING)

  // Notes
  buyerNote         String?
  sellerNote        String?
  adminNote         String?

  // Cancellation/Refund
  cancellationReason String?
  refundAmount      Float?
  refundedAt        DateTime?

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  transactions      Transaction[]
  dispute           Dispute?

  @@index([buyerId])
  @@index([sellerId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id                String          @id @default(cuid())
  orderId           String
  order             Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Product/Service Reference
  readyProductId    String?
  readyProduct      ReadyProduct?   @relation(fields: [readyProductId], references: [id])

  customServiceId   String?
  customService     CustomService?  @relation(fields: [customServiceId], references: [id])

  // Item Details
  title             String
  description       String?
  packageName       String?         // For custom services

  // Pricing
  price             Float
  quantity          Int             @default(1)
  total             Float

  // Requirements (for custom services)
  requirements      Json?

  // Delivery
  deliveryDays      Int?
  revisions         Int             @default(0)

  // Files (for ready products)
  downloadedAt      DateTime?
  downloadCount     Int             @default(0)

  createdAt         DateTime        @default(now())

  @@index([orderId])
  @@index([readyProductId])
  @@index([customServiceId])
}

// ============================================
// PAYMENTS & TRANSACTIONS
// ============================================

enum TransactionType {
  PURCHASE
  SALE
  REFUND
  WITHDRAWAL
  COMMISSION
  BONUS
  PENALTY
}

model Transaction {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id])

  orderId           String?
  order             Order?          @relation(fields: [orderId], references: [id])

  type              TransactionType
  amount            Float
  currency          String          @default("SAR")

  // Fees
  platformFee       Float           @default(0)
  paymentFee        Float           @default(0)
  taxAmount         Float           @default(0)
  netAmount         Float

  // Balance
  balanceBefore     Float
  balanceAfter      Float

  // Payment Details
  paymentMethod     PaymentMethod?
  paymentReference  String?

  description       String?
  metadata          Json?

  createdAt         DateTime        @default(now())

  @@index([userId])
  @@index([orderId])
  @@index([type])
  @@index([createdAt])
}

model Withdrawal {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id])

  amount            Float
  currency          String          @default("SAR")

  // Bank Details
  bankName          String
  accountNumber     String
  accountName       String
  iban              String?

  status            String          @default("PENDING") // PENDING, PROCESSING, COMPLETED, REJECTED

  processedAt       DateTime?
  completedAt       DateTime?

  adminNote         String?

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([userId])
  @@index([status])
}

// ============================================
// REVIEWS & RATINGS
// ============================================

model Review {
  id                String          @id @default(cuid())

  reviewerId        String
  reviewer          User            @relation(fields: [reviewerId], references: [id])

  revieweeId        String
  reviewee          User            @relation("reviewee", fields: [revieweeId], references: [id])

  orderId           String?

  // For Ready Products
  readyProductId    String?
  readyProduct      ReadyProduct?   @relation(fields: [readyProductId], references: [id])

  // For Custom Services
  customServiceId   String?
  customService     CustomService?  @relation(fields: [customServiceId], references: [id])

  // Review Content
  rating            Int             // 1-5
  title             String?
  comment           String

  // Detailed Ratings
  communicationRating Int?
  qualityRating     Int?
  deliveryRating    Int?
  valueRating       Int?

  // Response
  sellerResponse    String?
  sellerRespondedAt DateTime?

  // Status
  isPublished       Boolean         @default(true)
  isVerified        Boolean         @default(false)

  // Helpful votes
  helpfulCount      Int             @default(0)

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([reviewerId])
  @@index([revieweeId])
  @@index([readyProductId])
  @@index([customServiceId])
  @@index([rating])
}

// ============================================
// MESSAGING & NOTIFICATIONS
// ============================================

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

model Message {
  id                String          @id @default(cuid())

  senderId          String
  sender            User            @relation("sender", fields: [senderId], references: [id])

  receiverId        String
  receiver          User            @relation("receiver", fields: [receiverId], references: [id])

  // Message Content
  subject           String?
  content           String
  attachments       String[]

  // Order Reference (if related to order)
  orderId           String?

  // Status
  status            MessageStatus   @default(SENT)
  readAt            DateTime?

  // Thread
  parentId          String?
  threadId          String?

  createdAt         DateTime        @default(now())

  @@index([senderId])
  @@index([receiverId])
  @@index([threadId])
  @@index([createdAt])
}

enum NotificationType {
  ORDER
  MESSAGE
  REVIEW
  PAYMENT
  SYSTEM
  MARKETING
}

model Notification {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  type              NotificationType
  title             String
  message           String

  link              String?
  metadata          Json?

  isRead            Boolean           @default(false)
  readAt            DateTime?

  createdAt         DateTime          @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

// ============================================
// FAVORITES & CART
// ============================================

model Favorite {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  readyProductId    String?
  readyProduct      ReadyProduct?   @relation(fields: [readyProductId], references: [id], onDelete: Cascade)

  customServiceId   String?
  customService     CustomService?  @relation(fields: [customServiceId], references: [id], onDelete: Cascade)

  createdAt         DateTime        @default(now())

  @@unique([userId, readyProductId])
  @@unique([userId, customServiceId])
  @@index([userId])
}

model CartItem {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  readyProductId    String?
  customServiceId   String?

  packageId         String?         // For service packages
  quantity          Int             @default(1)

  // Custom requirements for services
  requirements      Json?

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([userId])
}

// ============================================
// DISPUTES & REPORTS
// ============================================

enum DisputeStatus {
  OPEN
  IN_REVIEW
  RESOLVED
  CLOSED
}

model Dispute {
  id                String          @id @default(cuid())
  orderId           String          @unique
  order             Order           @relation(fields: [orderId], references: [id])

  openedBy          String
  openedByUser      User            @relation(fields: [openedBy], references: [id])
  reason            String
  description       String
  evidence          String[]

  status            DisputeStatus   @default(OPEN)

  resolution        String?
  resolvedBy        String?
  resolvedAt        DateTime?

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([orderId])
  @@index([openedBy])
  @@index([status])
}

model Report {
  id                String          @id @default(cuid())

  reporterId        String
  reporter          User            @relation("reporter", fields: [reporterId], references: [id])

  reportedId        String
  reported          User            @relation("reported", fields: [reportedId], references: [id])

  type              String          // USER, PRODUCT, SERVICE, PROJECT, REVIEW
  targetId          String

  reason            String
  description       String
  evidence          String[]

  status            String          @default("PENDING") // PENDING, REVIEWING, RESOLVED, DISMISSED

  adminNote         String?
  resolvedAt        DateTime?

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([reporterId])
  @@index([reportedId])
  @@index([status])
}

// ============================================
// ADMIN & SETTINGS
// ============================================

model Session {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  token             String          @unique
  ipAddress         String?
  userAgent         String?

  expiresAt         DateTime
  createdAt         DateTime        @default(now())

  @@index([userId])
  @@index([token])
}

model PlatformSettings {
  id                String          @id @default(cuid())
  key               String          @unique
  value             Json
  description       String?

  updatedAt         DateTime        @updatedAt

  @@index([key])
}

model AuditLog {
  id                String          @id @default(cuid())
  userId            String?
  action            String
  entity            String
  entityId          String?
  details           Json?
  ipAddress         String?

  createdAt         DateTime        @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

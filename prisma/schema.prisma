generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id        String   @id
  userId    String?
  userRole  String?
  action    String
  entity    String
  entityId  String?
  changes   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([action])
  @@index([createdAt])
  @@index([entity])
  @@index([userId])
}

model Contract {
  id                               String        @id
  contractNumber                   String        @unique
  projectId                        String        @unique
  clientId                         String
  freelancerId                     String
  proposalId                       String        @unique
  totalAmount                      Decimal       @db.Decimal(10, 2)
  platformFee                      Decimal       @db.Decimal(10, 2)
  paymentFee                       Decimal       @db.Decimal(10, 2)
  freelancerEarning                Decimal       @db.Decimal(10, 2)
  startDate                        DateTime      @default(now())
  deadline                         DateTime?
  status                           ProjectStatus @default(IN_PROGRESS)
  deliveryFiles                    String[]
  deliveryNote                     String?
  completedAt                      DateTime?
  createdAt                        DateTime      @default(now())
  updatedAt                        DateTime
  User_Contract_clientIdToUser     User          @relation("Contract_clientIdToUser", fields: [clientId], references: [id])
  User_Contract_freelancerIdToUser User          @relation("Contract_freelancerIdToUser", fields: [freelancerId], references: [id])
  Project                          Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Proposal                         Proposal      @relation(fields: [proposalId], references: [id])
  Escrow                           Escrow?
  Milestone                        Milestone[]
  Payment                          Payment?

  @@index([clientId])
  @@index([freelancerId])
  @@index([projectId])
  @@index([proposalId])
  @@index([status])
}

model Dispute {
  id                               String        @id
  disputeNumber                    String        @unique
  complainantId                    String
  respondentId                     String
  marketType                       MarketType
  orderId                          String
  reason                           DisputeReason
  description                      String
  attachments                      String[]
  status                           DisputeStatus @default(OPEN)
  resolution                       String?
  resolvedBy                       String?
  resolvedAt                       DateTime?
  refundAmount                     Decimal?      @db.Decimal(10, 2)
  createdAt                        DateTime      @default(now())
  updatedAt                        DateTime
  User_Dispute_complainantIdToUser User          @relation("Dispute_complainantIdToUser", fields: [complainantId], references: [id])
  User_Dispute_respondentIdToUser  User          @relation("Dispute_respondentIdToUser", fields: [respondentId], references: [id])

  @@index([complainantId])
  @@index([disputeNumber])
  @@index([respondentId])
  @@index([status])
}

model Escrow {
  id             String        @id
  amount         Decimal       @db.Decimal(10, 2)
  buyerId        String
  sellerId       String
  status         EscrowStatus  @default(PENDING)
  marketType     MarketType
  productOrderId String?       @unique
  serviceOrderId String?       @unique
  contractId     String?       @unique
  releasedAt     DateTime?
  refundedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  Contract       Contract?     @relation(fields: [contractId], references: [id])
  ProductOrder   ProductOrder? @relation(fields: [productOrderId], references: [id])
  ServiceOrder   ServiceOrder? @relation(fields: [serviceOrderId], references: [id])

  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
}

model Message {
  id                             String      @id
  senderId                       String
  recipientId                    String
  content                        String
  attachments                    String[]
  orderId                        String?
  marketType                     MarketType?
  isRead                         Boolean     @default(false)
  readAt                         DateTime?
  createdAt                      DateTime    @default(now())
  User_Message_recipientIdToUser User        @relation("Message_recipientIdToUser", fields: [recipientId], references: [id], onDelete: Cascade)
  User_Message_senderIdToUser    User        @relation("Message_senderIdToUser", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([recipientId])
  @@index([senderId])
}

model Milestone {
  id            String      @id
  contractId    String
  title         String
  description   String?
  amount        Decimal     @db.Decimal(10, 2)
  deadline      DateTime?
  status        OrderStatus @default(PENDING)
  deliveryFiles String[]
  deliveryNote  String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  deliveredAt   DateTime?
  acceptedAt    DateTime?
  Contract      Contract    @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
}

model Notification {
  id        String           @id
  userId    String
  type      NotificationType
  titleAr   String
  titleEn   String
  messageAr String
  messageEn String
  link      String?
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isRead])
  @@index([userId])
}

model OAuthAccount {
  id           String    @id
  userId       String
  provider     String
  providerId   String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
}

model Payment {
  id                   String        @id
  paymentNumber        String        @unique
  payerId              String
  amount               Decimal       @db.Decimal(10, 2)
  currency             String        @default("SAR")
  method               PaymentMethod
  status               PaymentStatus @default(PENDING)
  gatewayTransactionId String?
  gatewayResponse      String?
  marketType           MarketType
  productOrderId       String?       @unique
  serviceOrderId       String?       @unique
  contractId           String?       @unique
  createdAt            DateTime      @default(now())
  updatedAt            DateTime
  completedAt          DateTime?
  Contract             Contract?     @relation(fields: [contractId], references: [id])
  ProductOrder         ProductOrder? @relation(fields: [productOrderId], references: [id])
  ServiceOrder         ServiceOrder? @relation(fields: [serviceOrderId], references: [id])

  @@index([payerId])
  @@index([paymentNumber])
  @@index([status])
}

model Product {
  id              String          @id
  sellerId        String
  titleAr         String
  titleEn         String
  descriptionAr   String
  descriptionEn   String
  slug            String          @unique
  categoryId      String
  price           Decimal         @db.Decimal(10, 2)
  originalPrice   Decimal?        @db.Decimal(10, 2)
  thumbnail       String
  images          String[]
  demoUrl         String?
  tags            String[]
  downloadCount   Int             @default(0)
  viewCount       Int             @default(0)
  status          ProductStatus   @default(DRAFT)
  rejectionReason String?
  averageRating   Decimal         @default(0) @db.Decimal(3, 2)
  reviewCount     Int             @default(0)
  metaTitleAr     String?
  metaTitleEn     String?
  metaDescAr      String?
  metaDescEn      String?
  aiGenerated     Boolean         @default(false)
  aiTags          String[]
  aiCategory      String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  publishedAt     DateTime?
  ProductCategory ProductCategory @relation(fields: [categoryId], references: [id])
  User            User            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  ProductFile     ProductFile[]
  ProductPackage  ProductPackage[]
  ProductOrder    ProductOrder[]
  ProductReview   ProductReview[]

  @@index([categoryId])
  @@index([sellerId])
  @@index([slug])
  @@index([status])
}

model ProductCategory {
  id                    String            @id
  nameAr                String
  nameEn                String
  slug                  String            @unique
  icon                  String?
  parentId              String?
  order                 Int               @default(0)
  isActive              Boolean           @default(true)
  createdAt             DateTime          @default(now())
  Product               Product[]
  ProductCategory       ProductCategory?  @relation("ProductCategoryToProductCategory", fields: [parentId], references: [id], onDelete: Cascade)
  other_ProductCategory ProductCategory[] @relation("ProductCategoryToProductCategory")

  @@index([parentId])
  @@index([slug])
}

model ProductFile {
  id        String   @id
  productId String
  fileName  String
  fileUrl   String
  fileSize  Int
  fileType  String
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductPackage {
  id              String      @id
  productId       String
  tier            PackageTier
  nameAr          String
  nameEn          String
  descriptionAr   String
  descriptionEn   String
  price           Decimal     @db.Decimal(10, 2)
  features        String[]
  deliveryDays    Int?
  revisions       Int?
  isUnlimited     Boolean     @default(false)
  files           String[]
  isActive        Boolean     @default(true)
  sortOrder       Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime
  Product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([tier])
}

model ProductOrder {
  id                               String      @id
  orderNumber                      String      @unique
  buyerId                          String
  sellerId                         String
  productId                        String
  productPrice                     Decimal     @db.Decimal(10, 2)
  platformFee                      Decimal     @db.Decimal(10, 2)
  paymentFee                       Decimal     @db.Decimal(10, 2)
  totalAmount                      Decimal     @db.Decimal(10, 2)
  sellerEarning                    Decimal     @db.Decimal(10, 2)
  status                           OrderStatus @default(PENDING)
  downloadUrl                      String?
  downloadCount                    Int         @default(0)
  downloadExpiresAt                DateTime?
  createdAt                        DateTime    @default(now())
  updatedAt                        DateTime
  completedAt                      DateTime?
  Escrow                           Escrow?
  Payment                          Payment?
  User_ProductOrder_buyerIdToUser  User        @relation("ProductOrder_buyerIdToUser", fields: [buyerId], references: [id])
  Product                          Product     @relation(fields: [productId], references: [id])
  User_ProductOrder_sellerIdToUser User        @relation("ProductOrder_sellerIdToUser", fields: [sellerId], references: [id])

  @@index([buyerId])
  @@index([orderNumber])
  @@index([productId])
  @@index([sellerId])
  @@index([status])
}

model ProductReview {
  id                                  String    @id
  productId                           String
  reviewerId                          String
  sellerId                            String
  orderId                             String    @unique
  rating                              Int
  comment                             String?
  sellerResponse                      String?
  respondedAt                         DateTime?
  createdAt                           DateTime  @default(now())
  updatedAt                           DateTime
  Product                             Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  User_ProductReview_reviewerIdToUser User      @relation("ProductReview_reviewerIdToUser", fields: [reviewerId], references: [id], onDelete: Cascade)
  User_ProductReview_sellerIdToUser   User      @relation("ProductReview_sellerIdToUser", fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([reviewerId])
  @@index([sellerId])
}

model Project {
  id              String          @id
  clientId        String
  titleAr         String
  titleEn         String
  descriptionAr   String
  descriptionEn   String
  slug            String          @unique
  categoryId      String
  budgetMin       Decimal?        @db.Decimal(10, 2)
  budgetMax       Decimal?        @db.Decimal(10, 2)
  budgetType      String
  duration        Int?
  deadline        DateTime?
  skills          String[]
  attachments     String[]
  status          ProjectStatus   @default(OPEN)
  proposalCount   Int             @default(0)
  viewCount       Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  publishedAt     DateTime?
  closedAt        DateTime?
  Contract        Contract?
  ProjectCategory ProjectCategory @relation(fields: [categoryId], references: [id])
  User            User            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  Proposal        Proposal[]

  @@index([categoryId])
  @@index([clientId])
  @@index([slug])
  @@index([status])
}

model ProjectCategory {
  id                    String            @id
  nameAr                String
  nameEn                String
  slug                  String            @unique
  icon                  String?
  parentId              String?
  order                 Int               @default(0)
  isActive              Boolean           @default(true)
  createdAt             DateTime          @default(now())
  Project               Project[]
  ProjectCategory       ProjectCategory?  @relation("ProjectCategoryToProjectCategory", fields: [parentId], references: [id], onDelete: Cascade)
  other_ProjectCategory ProjectCategory[] @relation("ProjectCategoryToProjectCategory")

  @@index([parentId])
  @@index([slug])
}

model Proposal {
  id             String    @id
  projectId      String
  freelancerId   String
  coverLetter    String
  proposedAmount Decimal   @db.Decimal(10, 2)
  deliveryDays   Int
  attachments    String[]
  milestonesJson String?
  status         String    @default("PENDING")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  Contract       Contract?
  User           User      @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  Project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([freelancerId])
  @@index([projectId])
}

model RevenueSettings {
  id                 String   @id
  platformCommission Decimal  @default(25.00) @db.Decimal(5, 2)
  paymentGatewayFee  Decimal  @default(5.00) @db.Decimal(5, 2)
  individualPrice    Decimal  @default(100.00) @db.Decimal(10, 2)
  smePrice           Decimal  @default(250.00) @db.Decimal(10, 2)
  largePrice         Decimal  @default(500.00) @db.Decimal(10, 2)
  disputeWindowDays  Int      @default(7)
  updatedAt          DateTime
  updatedBy          String?
}

model Service {
  id              String           @id
  sellerId        String
  titleAr         String
  titleEn         String
  descriptionAr   String
  descriptionEn   String
  slug            String           @unique
  categoryId      String
  thumbnail       String
  images          String[]
  videoUrl        String?
  tags            String[]
  viewCount       Int              @default(0)
  orderCount      Int              @default(0)
  status          ServiceStatus    @default(PENDING)
  rejectionReason String?
  averageRating   Decimal          @default(0) @db.Decimal(3, 2)
  reviewCount     Int              @default(0)
  metaTitleAr     String?
  metaTitleEn     String?
  metaDescAr      String?
  metaDescEn      String?
  aiGenerated     Boolean          @default(false)
  aiTags          String[]
  aiCategory      String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  publishedAt     DateTime?
  ServiceCategory ServiceCategory  @relation(fields: [categoryId], references: [id])
  User            User             @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  ServiceOrder    ServiceOrder[]
  ServicePackage  ServicePackage[]

  @@index([categoryId])
  @@index([sellerId])
  @@index([slug])
  @@index([status])
}

model ServiceCategory {
  id                    String            @id
  nameAr                String
  nameEn                String
  slug                  String            @unique
  icon                  String?
  parentId              String?
  order                 Int               @default(0)
  isActive              Boolean           @default(true)
  createdAt             DateTime          @default(now())
  Service               Service[]
  ServiceCategory       ServiceCategory?  @relation("ServiceCategoryToServiceCategory", fields: [parentId], references: [id], onDelete: Cascade)
  other_ServiceCategory ServiceCategory[] @relation("ServiceCategoryToServiceCategory")

  @@index([parentId])
  @@index([slug])
}

model ServiceMilestone {
  id            String       @id
  orderId       String
  title         String
  description   String?
  amount        Decimal      @db.Decimal(10, 2)
  status        OrderStatus  @default(PENDING)
  deliveryFiles String[]
  deliveryNote  String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  deliveredAt   DateTime?
  acceptedAt    DateTime?
  ServiceOrder  ServiceOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model ServiceOrder {
  id                               String             @id
  orderNumber                      String             @unique
  buyerId                          String
  sellerId                         String
  serviceId                        String
  packageType                      String
  packagePrice                     Decimal            @db.Decimal(10, 2)
  deliveryDays                     Int
  revisions                        Int
  requirements                     String
  attachments                      String[]
  platformFee                      Decimal            @db.Decimal(10, 2)
  paymentFee                       Decimal            @db.Decimal(10, 2)
  totalAmount                      Decimal            @db.Decimal(10, 2)
  sellerEarning                    Decimal            @db.Decimal(10, 2)
  status                           OrderStatus        @default(PENDING)
  deliveredAt                      DateTime?
  deliveryFiles                    String[]
  deliveryNote                     String?
  createdAt                        DateTime           @default(now())
  updatedAt                        DateTime
  completedAt                      DateTime?
  deadline                         DateTime?
  Escrow                           Escrow?
  Payment                          Payment?
  ServiceMilestone                 ServiceMilestone[]
  User_ServiceOrder_buyerIdToUser  User               @relation("ServiceOrder_buyerIdToUser", fields: [buyerId], references: [id])
  User_ServiceOrder_sellerIdToUser User               @relation("ServiceOrder_sellerIdToUser", fields: [sellerId], references: [id])
  Service                          Service            @relation(fields: [serviceId], references: [id])

  @@index([buyerId])
  @@index([orderNumber])
  @@index([sellerId])
  @@index([serviceId])
  @@index([status])
}

model ServicePackage {
  id              String      @id
  serviceId       String
  tier            PackageTier
  nameAr          String
  nameEn          String
  descriptionAr   String
  descriptionEn   String
  price           Decimal     @db.Decimal(10, 2)
  deliveryDays    Int
  revisions       Int
  isUnlimited     Boolean     @default(false)
  features        String[]
  extras          String[]
  quickDelivery   Boolean     @default(false)
  quickDeliveryFee Decimal?   @db.Decimal(10, 2)
  isActive        Boolean     @default(true)
  sortOrder       Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime
  Service         Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([tier])
}

model Session {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model Subscription {
  id                 String             @id
  userId             String             @unique
  tier               SubscriptionTier
  status             SubscriptionStatus @default(PENDING_PAYMENT)
  monthlyPrice       Decimal            @db.Decimal(10, 2)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean            @default(false)
  lastPaymentId      String?
  lastPaymentDate    DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  User               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userId])
}

model User {
  id                                           String          @id
  username                                     String          @unique
  email                                        String          @unique
  password                                     String?
  fullName                                     String
  phone                                        String?
  country                                      String
  role                                         UserRole        @default(USER)
  userType                                     UserType        @default(INDIVIDUAL)
  avatar                                       String?
  bio                                          String?
  skills                                       String[]
  languages                                    String[]
  emailVerified                                Boolean         @default(false)
  phoneVerified                                Boolean         @default(false)
  sellerLevel                                  SellerLevel     @default(NEW)
  totalSales                                   Int             @default(0)
  totalEarnings                                Decimal         @default(0) @db.Decimal(10, 2)
  completionRate                               Decimal         @default(0) @db.Decimal(5, 2)
  responseTime                                 Int?
  totalGigs                                    Int             @default(0)
  maxGigs                                      Int             @default(4)
  isPromoted                                   Boolean         @default(false)
  promotionExpiresAt                           DateTime?
  createdAt                                    DateTime        @default(now())
  updatedAt                                    DateTime
  lastLoginAt                                  DateTime?
  Contract_Contract_clientIdToUser             Contract[]      @relation("Contract_clientIdToUser")
  Contract_Contract_freelancerIdToUser         Contract[]      @relation("Contract_freelancerIdToUser")
  Dispute_Dispute_complainantIdToUser          Dispute[]       @relation("Dispute_complainantIdToUser")
  Dispute_Dispute_respondentIdToUser           Dispute[]       @relation("Dispute_respondentIdToUser")
  Message_Message_recipientIdToUser            Message[]       @relation("Message_recipientIdToUser")
  Message_Message_senderIdToUser               Message[]       @relation("Message_senderIdToUser")
  Notification                                 Notification[]
  OAuthAccount                                 OAuthAccount[]
  Product                                      Product[]
  ProductOrder_ProductOrder_buyerIdToUser      ProductOrder[]  @relation("ProductOrder_buyerIdToUser")
  ProductOrder_ProductOrder_sellerIdToUser     ProductOrder[]  @relation("ProductOrder_sellerIdToUser")
  ProductReview_ProductReview_reviewerIdToUser ProductReview[] @relation("ProductReview_reviewerIdToUser")
  ProductReview_ProductReview_sellerIdToUser   ProductReview[] @relation("ProductReview_sellerIdToUser")
  Project                                      Project[]
  Proposal                                     Proposal[]
  Service                                      Service[]
  ServiceOrder_ServiceOrder_buyerIdToUser      ServiceOrder[]  @relation("ServiceOrder_buyerIdToUser")
  ServiceOrder_ServiceOrder_sellerIdToUser     ServiceOrder[]  @relation("ServiceOrder_sellerIdToUser")
  Session                                      Session[]
  Subscription                                 Subscription?
  Wallet                                       Wallet?
  Withdrawal                                   Withdrawal[]
  Affiliate                                    Affiliate[]
  PromotedListing                              PromotedListing[]

  @@index([email])
  @@index([role])
  @@index([username])
  @@index([sellerLevel])
}

model Wallet {
  id             String       @id
  userId         String       @unique
  balance        Decimal      @default(0) @db.Decimal(10, 2)
  pendingBalance Decimal      @default(0) @db.Decimal(10, 2)
  currency       String       @default("SAR")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Withdrawal     Withdrawal[]

  @@index([userId])
}

model Withdrawal {
  id          String           @id
  userId      String
  walletId    String
  amount      Decimal          @db.Decimal(10, 2)
  currency    String           @default("SAR")
  bankDetails String
  status      WithdrawalStatus @default(PENDING)
  reviewedBy  String?
  reviewNote  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime
  completedAt DateTime?
  User        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Wallet      Wallet           @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userId])
  @@index([walletId])
}

enum DisputeReason {
  NOT_DELIVERED
  INCOMPLETE_WORK
  POOR_QUALITY
  NOT_AS_DESCRIBED
  BUYER_UNAVAILABLE
  PAYMENT_ISSUE
  OTHER
}

enum DisputeStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  ESCALATED
  CLOSED
}

enum EscrowStatus {
  PENDING
  HELD
  RELEASED
  REFUNDED
  DISPUTED
}

enum MarketType {
  PRODUCTS
  SERVICES
  PROJECTS
}

enum NotificationType {
  ORDER
  PAYMENT
  MESSAGE
  REVIEW
  DISPUTE
  SYSTEM
  MARKETING
}

enum OrderStatus {
  PENDING
  PAID
  IN_PROGRESS
  DELIVERED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  MADA
  VISA
  MASTERCARD
  APPLE_PAY
  STC_PAY
  PAYTABS
  MOYASAR
  PAYPAL
  GOOGLE_PAY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ProductStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum ServiceStatus {
  ACTIVE
  PAUSED
  PENDING
  REJECTED
  SUSPENDED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING_PAYMENT
}

enum SubscriptionTier {
  INDIVIDUAL
  SME
  LARGE
}

enum UserRole {
  USER
  ADMIN
}

enum UserType {
  INDIVIDUAL
  COMPANY
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  COMPLETED
  REJECTED
}

enum SellerLevel {
  NEW
  LEVEL_1
  LEVEL_2
  TOP_RATED
}

enum PackageTier {
  BASIC
  STANDARD
  PREMIUM
}

model Affiliate {
  id              String   @id
  userId          String
  affiliateCode   String   @unique
  commission      Decimal  @default(10) @db.Decimal(5, 2)
  totalClicks     Int      @default(0)
  totalSales      Int      @default(0)
  totalEarnings   Decimal  @default(0) @db.Decimal(10, 2)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  User            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  AffiliateSale   AffiliateSale[]

  @@index([userId])
  @@index([affiliateCode])
}

model AffiliateSale {
  id              String   @id
  affiliateId     String
  productId       String?
  serviceId       String?
  orderId         String
  saleAmount      Decimal  @db.Decimal(10, 2)
  commission      Decimal  @db.Decimal(10, 2)
  status          String   @default("PENDING")
  paidAt          DateTime?
  createdAt       DateTime @default(now())
  Affiliate       Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  @@index([affiliateId])
  @@index([orderId])
  @@index([status])
}

model PromotedListing {
  id              String   @id
  userId          String
  productId       String?
  serviceId       String?
  projectId       String?
  budget          Decimal  @db.Decimal(10, 2)
  spent           Decimal  @default(0) @db.Decimal(10, 2)
  clicks          Int      @default(0)
  views           Int      @default(0)
  orders          Int      @default(0)
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  User            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([startDate])
}
